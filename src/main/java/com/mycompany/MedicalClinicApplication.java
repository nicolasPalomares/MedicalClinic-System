package com.mycompany;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/** 
 * PRECONDITION: If the user wants to execute the program, it is necessary to configure the database first. For this, I exported an SQL file
 * with all the tables and data originally created from my PostgreSQL software. That file is located inside "psql_database_backup" folder inside the project directory.
 * Load it inside any SQL database software, and then complete the "application.properties" file with your database credentials.
 * 
 * This Spring application was made as a way to manage a Medical Clinic system, in wich the user can create information about clients, doctors, departments in the clinic,
 * specializations and appointments, and visualize it through HTML pages. Appointments need a client, a doctor, a date and a time in order to be created and saved.
 * By default, I also created two users for Spring Security: a standard user with USER role, and an admin with both USER and ADMIN roles. Creation of new users is not
 * available inside the program at the moment.
 * Users have the freedom to visualize the respective tables of clients, doctors and appointments. Meanwhile, the admin can manage the departments and specializations in the clinic
 * (this means that common users have no access to this information), and can edit and delete registers of every entity.
 * Since this application shares funcionalities from previous projects of mine, a lot of the code of this project was reused from my other program, the "Student Management System".
 * The program includes i18n with two languages, english (default) and spanish.
 * 
 * Problems encountered:
 * - {@link #toString()} method generated by Lombok with @Data annotation in {@link com.mycompany.domain.Client} and {@link com.mycompany.domain.Doctor} classes was causing a StackOverflowError
 *   because of the relationships between Client-Appointment, and Doctor-Appointment. The solution was to exclude the appointments list element from toString method from both
 *   Client and Doctor classes.
 * 
 * Key Features:
 * - User/Admin authentication and authorization ensure secure access to the system.
 * - Spring Security provides robust authentication and authorization mechanisms.
 * - Hibernate ORM simplifies database interactions, ensuring data integrity.
 * - Thymeleaf templates facilitate dynamic web page rendering.
 * - RESTful APIs are utilized for seamless integration with front-end applications.
 * 
 * Architecture:
 * This application follows the Model-View-Controller (MVC) architecture pattern, with Spring Boot providing the framework for rapid development and deployment.
 * - Controller handles incoming HTTP requests, routes them to the appropiate services, and returns responses to clients.
 * - Services and DAO classes encapsulate business logic and interact with repositories for database operations.
 * - Entities represent database elements and are mapped to Java objects.
 * - HTML pages represent the View layer for every logic operation.
 * 
 * External Dependencies:
 * - PostgreSQL database for persistence storage of student (including address and contact), course, assignment, user and role (USER, ADMIN) data.
 * - Spring Boot Starter Web for building web applications (using Spring Tools 4 plugin).
 * - Spring Data JPA for simplifying database access.
 * - Spring Security for implementing authentication and authorization.
 * - Spring Boot Starter Validation for validating data in the application.
 * 
 * (For detailed documentation of each class, method and component, please refer to the generated Javadoc)
 * 
 * 
 * UPDATE 2.0 (June 13, 2024)
 * The application has been updated to include Bootstrap 5.3.3
 * Key features include:
 * - Enhanced UI components.
 * - Predefined styling classes for forms, buttons, and other UI components.
 * - Responsive design.
 * - Pages have been separated in sections through layout pages ('src/main/java/resources/templates/layout'), and then loaded with Thymeleaf fragments.
 * 
 * IMPORTANT: Right now, there is a problem in which the Bootstrap styles (sometimes) don't load in the login page. This happens in two parts of
 * the application: the first time the server is up, and after a session timeout. Still working on a solution.
 */

@SpringBootApplication
public class MedicalClinicApplication {

	public static void main(String[] args) {
		SpringApplication.run(MedicalClinicApplication.class, args);
	}

}
